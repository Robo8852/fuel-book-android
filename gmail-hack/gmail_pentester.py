#!/usr/bin/env python3
"""
Gmail API Pentesting Script
Legitimate access to your own Gmail account
"""

import os
import json
import base64
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Gmail API scopes
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

class GmailPentester:
    def __init__(self):
        self.service = None
        self.credentials = None
        
    def authenticate(self):
        """Authenticate with Gmail API using OAuth2"""
        print("🔐 Gmail API Pentesting Authentication")
        print("=" * 50)
        
        # Check if we have existing credentials
        if os.path.exists('token.json'):
            self.credentials = Credentials.from_authorized_user_file('token.json', SCOPES)
        
        # If no valid credentials, get new ones
        if not self.credentials or not self.credentials.valid:
            if self.credentials and self.credentials.expired and self.credentials.refresh_token:
                print("🔄 Refreshing expired credentials...")
                self.credentials.refresh(Request())
            else:
                print("🌐 Opening browser for OAuth2 authentication...")
                print("📝 You need to create credentials.json first!")
                print("   1. Go to: https://console.cloud.google.com/")
                print("   2. Create project → Enable Gmail API")
                print("   3. Create OAuth2 credentials → Download JSON")
                print("   4. Save as 'credentials.json' in this directory")
                return False
                
            # Save credentials for next time
            with open('token.json', 'w') as token:
                token.write(self.credentials.to_json())
        
        # Build Gmail service
        self.service = build('gmail', 'v1', credentials=self.credentials)
        print("✅ Gmail API authenticated successfully!")
        return True
    
    def list_recent_emails(self, max_results=10):
        """List recent emails"""
        print(f"\n📧 Fetching {max_results} recent emails...")
        
        try:
            results = self.service.users().messages().list(
                userId='me', 
                maxResults=max_results
            ).execute()
            
            messages = results.get('messages', [])
            
            if not messages:
                print("📭 No emails found")
                return []
            
            print(f"📬 Found {len(messages)} emails")
            return messages
            
        except HttpError as error:
            print(f"❌ Error listing emails: {error}")
            return []
    
    def get_email_details(self, message_id):
        """Get detailed email information"""
        try:
            message = self.service.users().messages().get(
                userId='me', 
                id=message_id,
                format='full'
            ).execute()
            
            return message
        except HttpError as error:
            print(f"❌ Error getting email {message_id}: {error}")
            return None
    
    def extract_attachments(self, message):
        """Extract attachment information from email"""
        attachments = []
        
        def process_parts(parts):
            for part in parts:
                if part.get('filename'):
                    attachment_id = part.get('body', {}).get('attachmentId')
                    if attachment_id:
                        attachments.append({
                            'filename': part['filename'],
                            'attachment_id': attachment_id,
                            'size': part.get('body', {}).get('size', 0)
                        })
                
                # Recursively process nested parts
                if 'parts' in part:
                    process_parts(part['parts'])
        
        payload = message.get('payload', {})
        if 'parts' in payload:
            process_parts(payload['parts'])
        
        return attachments
    
    def download_attachment(self, message_id, attachment_id, filename):
        """Download specific attachment"""
        try:
            attachment = self.service.users().messages().attachments().get(
                userId='me',
                messageId=message_id,
                id=attachment_id
            ).execute()
            
            # Decode base64 data
            data = base64.urlsafe_b64decode(attachment['data'])
            
            # Save to file
            with open(f"downloads/{filename}", 'wb') as f:
                f.write(data)
            
            print(f"✅ Downloaded: {filename}")
            return True
            
        except HttpError as error:
            print(f"❌ Error downloading {filename}: {error}")
            return False
    
    def pentest_emails(self):
        """Main pentesting function"""
        print("\n🚀 Gmail Pentesting Started")
        print("=" * 50)
        
        # Create downloads directory
        os.makedirs('downloads', exist_ok=True)
        
        # Get recent emails
        messages = self.list_recent_emails(5)
        
        if not messages:
            return
        
        # Process each email
        for i, message in enumerate(messages, 1):
            print(f"\n📧 Email {i}/{len(messages)}: {message['id']}")
            
            # Get email details
            email_details = self.get_email_details(message['id'])
            if not email_details:
                continue
            
            # Extract headers
            headers = email_details.get('payload', {}).get('headers', [])
            subject = next((h['value'] for h in headers if h['name'] == 'Subject'), 'No Subject')
            sender = next((h['value'] for h in headers if h['name'] == 'From'), 'Unknown Sender')
            
            print(f"   📝 Subject: {subject}")
            print(f"   👤 From: {sender}")
            
            # Extract attachments
            attachments = self.extract_attachments(email_details)
            
            if attachments:
                print(f"   📎 Attachments: {len(attachments)}")
                
                # Download image attachments
                for attachment in attachments:
                    filename = attachment['filename']
                    if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                        print(f"   🖼️  Downloading image: {filename}")
                        self.download_attachment(
                            message['id'], 
                            attachment['attachment_id'], 
                            filename
                        )
                    else:
                        print(f"   📄 Skipping non-image: {filename}")
            else:
                print("   📎 No attachments")
        
        print(f"\n🎉 Pentesting complete! Check 'downloads/' directory")
        print(f"📁 Downloaded files:")
        
        # List downloaded files
        if os.path.exists('downloads'):
            files = os.listdir('downloads')
            for file in files:
                size = os.path.getsize(f"downloads/{file}")
                print(f"   📄 {file} ({size} bytes)")

def main():
    """Main function"""
    print("🔐 Gmail API Pentesting Tool")
    print("=" * 50)
    print("⚠️  This tool accesses YOUR OWN Gmail account")
    print("⚠️  You must authenticate with your Google account")
    print("⚠️  Only reads emails - cannot send or delete")
    print()
    
    pentester = GmailPentester()
    
    # Check for credentials file
    if not os.path.exists('credentials.json'):
        print("❌ credentials.json not found!")
        print("📝 Please create Gmail API credentials:")
        print("   1. Go to: https://console.cloud.google.com/")
        print("   2. Create new project")
        print("   3. Enable Gmail API")
        print("   4. Create OAuth2 credentials")
        print("   5. Download JSON and save as 'credentials.json'")
        return
    
    # Authenticate
    if not pentester.authenticate():
        return
    
    # Start pentesting
    pentester.pentest_emails()

if __name__ == "__main__":
    main()

