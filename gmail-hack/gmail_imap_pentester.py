#!/usr/bin/env python3
"""
Gmail IMAP Pentesting Script
Direct IMAP access to your Gmail account
No API credentials needed - uses your Gmail password!
"""

import imaplib
import email
import base64
import os
import re
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

class GmailIMAPPentester:
    def __init__(self):
        self.mail = None
        self.connected = False
        
    def connect(self, email_address, password):
        """Connect to Gmail via IMAP"""
        print("🔐 Connecting to Gmail via IMAP...")
        print(f"📧 Email: {email_address}")
        print("🔑 Using password/app password")
        
        try:
            # Connect to Gmail IMAP server
            self.mail = imaplib.IMAP4_SSL('imap.gmail.com', 993)
            self.mail.login(email_address, password)
            self.connected = True
            print("✅ Connected to Gmail successfully!")
            return True
        except Exception as e:
            print(f"❌ Connection failed: {e}")
            return False
    
    def list_folders(self):
        """List all Gmail folders"""
        if not self.connected:
            return []
            
        print("\n📁 Gmail Folders:")
        print("=" * 30)
        
        try:
            # List all folders
            status, folders = self.mail.list()
            
            for folder in folders:
                folder_name = folder.decode().split('"')[-2]
                print(f"📂 {folder_name}")
            
            return folders
        except Exception as e:
            print(f"❌ Error listing folders: {e}")
            return []
    
    def search_emails(self, folder='INBOX', search_criteria='ALL', max_results=10):
        """Search emails in specified folder"""
        if not self.connected:
            return []
            
        print(f"\n🔍 Searching emails in {folder}...")
        print(f"📋 Criteria: {search_criteria}")
        print(f"📊 Max results: {max_results}")
        
        try:
            # Select folder
            self.mail.select(folder)
            
            # Search for emails
            status, messages = self.mail.search(None, search_criteria)
            
            if status != 'OK':
                print("❌ Search failed")
                return []
            
            # Get email IDs
            email_ids = messages[0].split()
            
            # Limit results
            if len(email_ids) > max_results:
                email_ids = email_ids[-max_results:]
            
            print(f"📧 Found {len(email_ids)} emails")
            return email_ids
            
        except Exception as e:
            print(f"❌ Search error: {e}")
            return []
    
    def get_email_details(self, email_id):
        """Get detailed email information"""
        if not self.connected:
            return None
            
        try:
            # Fetch email
            status, msg_data = self.mail.fetch(email_id, '(RFC822)')
            
            if status != 'OK':
                return None
            
            # Parse email
            email_body = msg_data[0][1]
            email_message = email.message_from_bytes(email_body)
            
            # Extract details
            subject = email_message.get('Subject', 'No Subject')
            sender = email_message.get('From', 'Unknown Sender')
            date = email_message.get('Date', 'Unknown Date')
            
            return {
                'id': email_id.decode(),
                'subject': subject,
                'sender': sender,
                'date': date,
                'message': email_message
            }
            
        except Exception as e:
            print(f"❌ Error getting email {email_id}: {e}")
            return None
    
    def extract_attachments(self, email_message):
        """Extract attachment information from email"""
        attachments = []
        
        def process_parts(parts):
            for part in parts:
                if part.get_content_disposition() == 'attachment':
                    filename = part.get_filename()
                    if filename:
                        attachments.append({
                            'filename': filename,
                            'content_type': part.get_content_type(),
                            'size': len(part.get_payload(decode=True)) if part.get_payload(decode=True) else 0
                        })
                
                # Recursively process nested parts
                if part.is_multipart():
                    process_parts(part.get_payload())
        
        if email_message.is_multipart():
            process_parts(email_message.get_payload())
        
        return attachments
    
    def download_attachment(self, email_message, filename):
        """Download specific attachment"""
        try:
            for part in email_message.walk():
                if part.get_content_disposition() == 'attachment':
                    if part.get_filename() == filename:
                        # Decode attachment
                        attachment_data = part.get_payload(decode=True)
                        
                        # Save to file
                        with open(f"downloads/{filename}", 'wb') as f:
                            f.write(attachment_data)
                        
                        print(f"✅ Downloaded: {filename}")
                        return True
            
            print(f"❌ Attachment {filename} not found")
            return False
            
        except Exception as e:
            print(f"❌ Error downloading {filename}: {e}")
            return False
    
    def pentest_emails(self, email_address, password, max_emails=5):
        """Main pentesting function"""
        print("🚀 Gmail IMAP Pentesting Started")
        print("=" * 50)
        
        # Create downloads directory
        os.makedirs('downloads', exist_ok=True)
        
        # Connect to Gmail
        if not self.connect(email_address, password):
            return
        
        # List folders
        self.list_folders()
        
        # Search recent emails
        email_ids = self.search_emails('INBOX', 'ALL', max_emails)
        
        if not email_ids:
            print("📭 No emails found")
            return
        
        # Process each email
        for i, email_id in enumerate(email_ids, 1):
            print(f"\n📧 Email {i}/{len(email_ids)}: {email_id.decode()}")
            
            # Get email details
            email_details = self.get_email_details(email_id)
            if not email_details:
                continue
            
            print(f"   📝 Subject: {email_details['subject']}")
            print(f"   👤 From: {email_details['sender']}")
            print(f"   📅 Date: {email_details['date']}")
            
            # Extract attachments
            attachments = self.extract_attachments(email_details['message'])
            
            if attachments:
                print(f"   📎 Attachments: {len(attachments)}")
                
                # Download image attachments
                for attachment in attachments:
                    filename = attachment['filename']
                    if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                        print(f"   🖼️  Downloading image: {filename}")
                        self.download_attachment(email_details['message'], filename)
                    else:
                        print(f"   📄 Skipping non-image: {filename}")
            else:
                print("   📎 No attachments")
        
        print(f"\n🎉 IMAP Pentesting complete! Check 'downloads/' directory")
        print(f"📁 Downloaded files:")
        
        # List downloaded files
        if os.path.exists('downloads'):
            files = os.listdir('downloads')
            for file in files:
                size = os.path.getsize(f"downloads/{file}")
                print(f"   📄 {file} ({size} bytes)")
    
    def disconnect(self):
        """Disconnect from Gmail"""
        if self.connected:
            self.mail.close()
            self.mail.logout()
            print("🔌 Disconnected from Gmail")

def main():
    """Main function"""
    print("🔐 Gmail IMAP Pentesting Tool")
    print("=" * 50)
    print("⚠️  Direct IMAP access to your Gmail account")
    print("⚠️  No API credentials needed!")
    print("⚠️  Uses your Gmail password/app password")
    print()
    print("📝 Requirements:")
    print("   1. Gmail account with 2FA enabled")
    print("   2. App password (not regular password)")
    print("   3. Enable 'Less secure app access' or use app password")
    print()
    
    # Get credentials
    email_address = input("📧 Enter your Gmail address: ")
    password = input("🔑 Enter your Gmail app password: ")
    
    if not email_address or not password:
        print("❌ Email and password required!")
        return
    
    # Start pentesting
    pentester = GmailIMAPPentester()
    
    try:
        pentester.pentest_emails(email_address, password)
    except KeyboardInterrupt:
        print("\n⏹️  Pentesting interrupted by user")
    except Exception as e:
        print(f"\n❌ Error: {e}")
    finally:
        pentester.disconnect()

if __name__ == "__main__":
    main()

